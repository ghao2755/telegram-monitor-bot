const { Telegraf, Markup } = require('telegraf');
const cron = require('node-cron');
const fs = require('fs-extra');
const path = require('path');

// 导入日志模块
const logger = require('./logger');

// 全局错误处理
process.on('unhandledRejection', (reason, promise) => {
  logger.error('未处理的 Promise 拒绝:', reason);
  // 可以添加通知管理员的逻辑
});

process.on('uncaughtException', (error) => {
  logger.error('未捕获的异常:', error);
  // 可以添加重启逻辑或通知管理员
});

// 导入自定义模块
const keyboard = require('./keyboard');
const utils = require('./utils');

// 机器人实例
let bot = null;
let database = null;
let handlers = null;

// 在文件顶部添加updateActivity变量
let updateActivity = () => {}; // 默认空函数

// 初始化机器人核心功能
const init = async (botInstance, dbInstance, handlersInstance, updateActivityFn) => {
  bot = botInstance;
  database = dbInstance;
  handlers = handlersInstance;
  
  // 存储更新活动时间的函数
  updateActivity = updateActivityFn || (() => {});
  
  // 设置handlers中的活动跟踪器
  if (handlers.setupActivityTracker) {
    handlers.setupActivityTracker(updateActivity);
  }

  try {
    // 设置自动恢复机制
    await setupAutoRecovery();
    
    // 初始化命令
    initCommands(updateActivity);
    
    // 初始化消息处理
    initMessageProcessing(updateActivity);
    
    // 初始化回调处理
    initCallbackHandlers(updateActivity);
    
    // 异步初始化定时任务
    await initCronJobs();
    
    logger.info('机器人核心功能初始化完成');
  }{"invoked_by":"Trae Builder","toolcall":{"thought":"诊断模式已激活。根据search_by_regex结果，bot.js中只有一个init声明（第34行），但诊断信息显示有两个。让我检查整个文件的行数和内容，确保彻底解决这个问题。","name":"view_files","params":{"files":[{"file_path":"/Users/mac/Desktop/telegram-monitor-bot/src/bot.js","start_line":1,"end_line":50}]}}}